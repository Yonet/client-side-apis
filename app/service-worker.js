// // This file is intentionally without code.
// // It's present so that service worker registration will work when serving from the 'app' directory.
// // The version of service-worker.js that's present in the 'dist' directory is automatically
// // generated by the 'generate-service-worker' gulp task, and contains code to precache resources.
// 'use strict';

// // Names of the two caches used in this version of the service worker.
// // Change to v2, etc. when you update any of the local resources, which will
// // in turn trigger the install event again.
// const PRECACHE = 'precache-v1';
// const RUNTIME = 'runtime';

// // A list of local resources we always want to be cached.
// const PRECACHE_URLS = [
//     // 'index.html',
//     // './', // Alias for index.html
//     // 'styles.css',
//     // '../styles/main.css',
//     // './scripts/main.js'
// ];

// // The install handler takes care of precaching the resources we always need.
// self.addEventListener('install', event => {
//     console.log('Installing', event);
//     event.waitUntil(
//         caches.open(PRECACHE)
//             .then(cache => cache.addAll(PRECACHE_URLS))
//             .then(self.skipWaiting())
//     );
// });

// // The activate handler takes care of cleaning up old caches.
// self.addEventListener('activate', event => {
//     console.log('Activating', event);
//     const currentCaches = [PRECACHE, RUNTIME];
//     event.waitUntil(
//         caches.keys().then(cacheNames => {
//             console.log('cacheNames', cacheNames);
//             return cacheNames;//cacheNames.filter(cacheName => !currentCaches.includes(cacheName));
//         }).then(cachesToDelete => {
//             console.log('cachesToDelete', cachesToDelete);
//             return Promise.all(cachesToDelete.map(cacheToDelete => {
//                 console.log('Deleting out of date cache:', cacheToDelete);
//                 return caches.delete(cacheToDelete);
//             }));
//         }).then(() => self.clients.claim())
//     );
// });

// // The fetch handler serves responses for same-origin resources from a cache.
// // If no response is found, it populates the runtime cache with the response
// // from the network before returning it to the page.
// self.addEventListener('fetch', event => {
//     // Skip cross-origin requests, like those for Google Analytics.
//     if (event.request.url.startsWith(self.location.origin)) {
//         event.respondWith(
//             caches.match(event.request).then(cachedResponse => {
//                 if (cachedResponse) {
//                     return cachedResponse;
//                 }

//                 return caches.open(RUNTIME).then(cache => {
//                     return fetch(event.request).then(response => {
//                         // Put a copy of the response in the runtime cache.
//                         return cache.put(event.request, response.clone()).then(() => {
//                             return response;
//                         });
//                     });
//                 });
//             })
//         );
//     }
// })

self.addEventListener('push', function (event) {
    console.log('Received a push message', event);

    var title = 'Yay a message.';
    var body = 'We have received a push message.';
    var icon = '/images/icon-128x128.png';
    var tag = 'simple-push-demo-notification-tag';

    event.waitUntil(
        self.registration.showNotification(title, {
            body: body,
            icon: icon,
            tag: tag
        })
    );
});

self.addEventListener('notificationclick', function (event) {
    console.log('On notification click: ', event.notification.tag);
    // Android doesnâ€™t close the notification when you click on it
    // See: http://crbug.com/463146
    event.notification.close();

    // This looks to see if the current is already open and
    // focuses if it is
    event.waitUntil(clients.matchAll({
        type: 'window'
    }).then(function (clientList) {
        for (var i = 0; i < clientList.length; i++) {
            var client = clientList[i];
            if (client.url === '/' && 'focus' in client) {
                return client.focus();
            }
        }
        if (clients.openWindow) {
            return clients.openWindow('/');
        }
    }));
});